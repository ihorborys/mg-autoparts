from dotenv import load_dotenv

load_dotenv()

from datetime import datetime
import os
from app.storage import StorageClient


def test_cleanup():
    storage = StorageClient()
    supplier = "ap_gdansk"
    prefix = f"1_23/{supplier}/"  # –ø–∞–ø–∫–∞ –¥–ª—è —Ç–µ—Å—Ç—É
    test_count = 10  # —Å—Ç–≤–æ—Ä–∏–º–æ 10 —Ç–µ—Å—Ç–æ–≤–∏—Ö –æ–±'—î–∫—Ç—ñ–≤
    keep_last = 7  # —Ö–æ—á–µ–º–æ –∑–∞–ª–∏—à–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ 7

    # 1Ô∏è‚É£ —Å—Ç–≤–æ—Ä–∏–º–æ "–ø–æ—Ä–æ–∂–Ω—ñ" —Ñ–∞–π–ª–∏ —É R2
    for i in range(test_count):
        key = f"{prefix}test_{i}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        print(f"üì§ Uploading {key}")
        storage.s3.put_object(
            Bucket=storage.bucket,
            Key=key,
            Body=f"test file {i}".encode("utf-8"),
            ContentType="text/plain",
        )

    # 2Ô∏è‚É£ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –æ—á–∏—â–µ–Ω–Ω—è
    storage.cleanup_old_files(prefix, keep=keep_last)

    # 3Ô∏è‚É£ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —Å–∫—ñ–ª—å–∫–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—å
    items = storage._list_all_objects(prefix)
    print(f"\n‚úÖ {len(items)} files remaining (expected {keep_last}):")
    for obj in items:
        print(" -", obj["Key"])


if __name__ == "__main__":
    test_cleanup()
